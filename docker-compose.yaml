services:
  backend:
    build:
      context: .
    container_name: stocks_backend
    command: >
      sh -c "until pg_isready -h postgres -U ${POSTGRES_USER}; do echo waiting for database; sleep 2; done &&
             python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             gunicorn --bind 0.0.0.0:8000 --workers 4 --access-logfile - --error-logfile - website.wsgi:application"
    volumes:
      - ./:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - .env
    environment:
      - DOCKER=true
      - DB_HOST=postgres
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_started
    networks:
      - backend_network
    restart: unless-stopped

  postgres:
    image: postgres:15
    container_name: stocks_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
    command: >
      sh -c "locale-gen en_US.UTF-8 &&
             update-locale LANG=en_US.UTF-8 &&
             exec docker-entrypoint.sh postgres"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} || exit 0" ]
      interval: 5s
      timeout: 5s
      retries: 30
    ports:
      - "5432:5432"
    networks:
      - backend_network
    restart: unless-stopped

  nginx:
    image: nginx:1.25-alpine
    container_name: stocks_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - backend
    networks:
      - backend_network
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    container_name: stocks_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - backend_network
    depends_on:
      - postgres
    restart: unless-stopped

networks:
  backend_network:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
  media_volume:
  pgadmin_data: